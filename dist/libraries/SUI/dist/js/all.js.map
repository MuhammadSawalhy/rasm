{"version":3,"sources":["index.js","ui-backLayer.js","ui-dropdown.js","ui-messege.js","ui-tabs.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChlvQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["var SUI = {\r\n\r\n};\r\n\r\nfunction clearNodes(elt) {\r\n   while (elt.hasChildNodes()) {\r\n      elt.firstChild.remove();\r\n   }\r\n}\r\n\r\nfunction getElementsFromHTML(html) {\r\n   let div = document.createElement('div');\r\n   div.innerHTML = html;\r\n   return div.childNodes;\r\n}\r\n\r\n","/**\r\n * @param {object} options had inside:\r\n * 1. cover\r\n*/\r\nSUI.BackLayer = function (options) {\r\n   let layer = {\r\n      options,\r\n      eltTOcover: options.eltTOcover,\r\n      status: 'hidden',\r\n      elt: (function () { \r\n         let elt = document.createElement('div');\r\n         elt.classList.add('sui-layer');\r\n         elt.classList.add('hidden');\r\n         elt.style.display = 'none';\r\n         elt.addEventListener('click', options.onclick);\r\n         document.body.appendChild(elt);\r\n         elt.style.zIndex = (options.zIndex) ? options.zIndex : 1999\r\n         return elt;\r\n      })(),\r\n      show: function (duration) {\r\n         this.__setBox();\r\n         let jelt = $(this.elt);\r\n         if (this.status === 'hidden') {\r\n            // when \"\"\"\"\"\"\"\"\"\"\"\"hidden\r\n            this.revealed = true;\r\n            jelt.removeClass('hidden');\r\n            jelt.addClass('showing');\r\n            this.status = 'showing';\r\n            jelt\r\n               .fadeIn(duration, () => {\r\n                  jelt.removeClass('showing');\r\n                  jelt.addClass('shown');\r\n                  this.status = 'shown';\r\n               });\r\n         } else if (this.status === 'hiding') {\r\n            // for the status of hiding\r\n            jelt.removeClass('hiding');\r\n            jelt.addClass('showing');\r\n            this.status = 'showing';\r\n            jelt\r\n               .stop(true)\r\n               .fadeIn(duration, () => {\r\n                  jelt.removeClass('showing');\r\n                  jelt.addClass('shown');\r\n                  this.status = 'shown';\r\n               });\r\n         }\r\n         \r\n      },\r\n      hide: function (duration) {\r\n         let jelt = $(this.elt);\r\n         if (this.status === 'shown' || this.status === 'showing') {\r\n            jelt.removeClass('shown');\r\n            jelt.removeClass('showing');\r\n            jelt.addClass('hiding');\r\n            this.status = 'hiding';\r\n            jelt\r\n               .stop(true) // for the status = 'showing'\r\n               .fadeOut(duration, () => {\r\n                  jelt.removeClass('hiding');\r\n                  jelt.addClass('hidden');\r\n                  this.status = 'hidden';\r\n               })\r\n         }\r\n      }, \r\n      remove: function () {\r\n         this.elt.remove();\r\n      },\r\n      __setBox: function () {\r\n         let box = this.eltTOcover.getBoundingClientRect();\r\n         this.elt.style.top = box.top + 'px';\r\n         this.elt.style.left = box.left + 'px';\r\n         this.elt.style.width = box.right + 'px';\r\n         this.elt.style.height = box.bottom + 'px';\r\n      }\r\n   };\r\n   return layer;\r\n}\r\n\r\n/**\r\n * an Example,,, \r\n * \r\n \r\n\r\nlet layer = SUI.BackLAyer({\r\n   eltTOcover: eltTOcover,\r\n   zIndex: zIndex,\r\n   onclcik: () => { }\r\n});\r\n\r\n \r\n */\r\n","\r\n//DropDown Is A Function That Processes An Already Existed Html Element(s).\r\n/**\r\n * content is html object\r\n * \r\n * layer, content, location, attached to the toggle, or set it by your self\r\n * make a func for setting location\r\n * ontoggling set the location of the toggle modefied according to the\r\n */\r\nSUI.DropDown = function (options = {}) {  \r\n   var refineDDlocation = (dd, toggleLocation) => {\r\n      /////// for the cloned DropDown ////////\r\n      /////// for the cloned DropDown ////////\r\n      /////// for the cloned DropDown ////////\r\n      /////// for the cloned DropDown //////// \r\n\r\n      var location = dd.location,\r\n         indSize = {\r\n            width: dd.indicator.offsetWidth,\r\n            height: dd.indicator.offsetHeight\r\n         },\r\n         indLocation = { x: 0, y: 0 },\r\n         \r\n         toggleSize = {\r\n            width: dd.toggle.offsetWidth,\r\n            height: dd.toggle.offsetHeight\r\n         },\r\n\r\n         menuSize = {\r\n            width: dd.menu.offsetWidth,\r\n            height: dd.menu.offsetHeight\r\n         };\r\n\r\n\r\n      let style = window.getComputedStyle(dd.menu);\r\n      let margin = [\r\n         parseInt(style.marginLeft.replace('px', '')),\r\n         parseInt(style.marginTop.replace('px', '')),\r\n         parseInt(style.marginRight.replace('px', '')),\r\n         parseInt(style.marginBottom.replace('px', ''))\r\n      ];\r\n      \r\n      var dir = 'top';\r\n      if ((document.body.offsetWidth - dd.location.x - menuSize.width) < margin[2]) {\r\n         dir = 'right';\r\n         // exchange value of width and height as same as you rotate the shape by 90deg\r\n         [indSize.width, indSize.height] = [indSize.height, indSize.width];\r\n      } else if (dd.location.x < margin[1]) {\r\n         dir = 'left';\r\n         // exchange value of width and height as same as you rotate the shape by 90deg\r\n         [indSize.width, indSize.height] = [indSize.height, indSize.width];\r\n      }\r\n      if ((document.body.offsetHeight - dd.location.y - menuSize.height) < margin[3]) {\r\n         dir = 'bottom';\r\n      }\r\n\r\n      let newLocation;\r\n      switch (dir) {\r\n         case 'top':\r\n            newLocation = {\r\n               x: constrain(\r\n                  location.x - menuSize.width / 2,\r\n                  margin[0],\r\n                  document.body.offsetWidth - dd.menu.offsetWidth - margin[2]\r\n               ),\r\n               y: constrain(\r\n                  dd.location.y + toggleSize.height + indSize.height,\r\n                  margin[1],\r\n                  document.body.offsetHeight - dd.menu.offsetHeight - margin[3]\r\n               )\r\n            };\r\n            break;\r\n         case 'bottom':\r\n            newLocation = {\r\n               x: constrain(\r\n                  location.x - menuSize.width / 2,\r\n                  margin[0],\r\n                  document.body.offsetWidth - dd.menu.offsetWidth - margin[2]\r\n               ),\r\n               y: constrain(\r\n                  dd.location.y - menuSize.height - indSize.height,\r\n                  margin[1],\r\n                  document.body.offsetHeight - dd.menu.offsetHeight - margin[3]\r\n               )\r\n            };\r\n            break;\r\n         case 'right':\r\n            newLocation = {\r\n               x: constrain(\r\n                  location.x - toggleSize.width - indSize.width,\r\n                  margin[0],\r\n                  document.body.offsetWidth - dd.menu.offsetWidth - margin[2]\r\n               ),\r\n               y: constrain(\r\n                  dd.location.y - menuSize.height / 2,\r\n                  margin[1],\r\n                  document.body.offsetHeight - dd.menu.offsetHeight - margin[3]\r\n               )\r\n            };\r\n            break;\r\n         case 'left':\r\n            newLocation = {\r\n               x: constrain(\r\n                  location.x + toggleSize.width + indSize.width,\r\n                  margin[0],\r\n                  document.body.offsetWidth - dd.menu.offsetWidth - margin[2]\r\n               ),\r\n               y: constrain(\r\n                  location.y - menuSize.height / 2,\r\n                  margin[1],\r\n                  document.body.offsetHeight - dd.menu.offsetHeight - margin[3]\r\n               )\r\n            };\r\n            break;\r\n      }\r\n\r\n      console.log('dir', dir);\r\n      console.log('toggleLocation', toggleLocation);\r\n      console.log('location', location);\r\n      console.log('newLocation', newLocation);\r\n\r\n      dd.location = newLocation;\r\n\r\n      dd.menu.style.top = (newLocation.y) + 'px';\r\n      dd.menu.style.left = (newLocation.x) + 'px';\r\n\r\n      /////// for the indicator ////////\r\n      /////// for the indicator ////////\r\n      dd.indicator.className = `indicator ${dir}`;\r\n\r\n      switch (dir) {\r\n         case 'top':\r\n            indLocation = {\r\n               x: constrain(\r\n                  toggleLocation.x - width / 2,\r\n                  newLocation.x + 5,\r\n                  newLocation.x + menuSize.width - width - 5\r\n               ),\r\n               y: newLocation.y - height\r\n            };\r\n            break;\r\n         case 'bottom':\r\n            indLocation = {\r\n               x: constrain(\r\n                  toggleLocation.x - width / 2,\r\n                  newLocation.x + 5,\r\n                  newLocation.x + menuSize.width - width - 5\r\n               ),\r\n               y: newLocation.y + menuSize.height\r\n            };\r\n            break;\r\n         case 'right':\r\n            indLocation = {\r\n               x: newLocation.x + menuSize.width,\r\n               y: constrain(\r\n                  toggleLocation.y - height/2,\r\n                  newLocation.y + 5,\r\n                  newLocation.y + menuSize.height - height - 5\r\n               )\r\n            };\r\n            break;\r\n         case 'left':\r\n            indLocation = {\r\n               x: newLocation.x - width,\r\n               y: constrain(\r\n                  toggleLocation.y - height / 2,\r\n                  newLocation.y + 5,\r\n                  newLocation.y + menuSize.height - height - 5\r\n               )\r\n            };\r\n            break;\r\n      }\r\n\r\n      dd.indicator.style.top = (indLocation.y) + 'px';\r\n      dd.indicator.style.left = (indLocation.x) + 'px';\r\n   }\r\n   var setClonedDDstyles = (dd) => {\r\n      let rect = dd.toggle.getBoundingClientRect();\r\n      let location = {\r\n         x: rect.left,\r\n         y: rect.top\r\n      };\r\n      dd.location = {\r\n         x: location.x,\r\n         y: location.y\r\n      };\r\n\r\n      dd.menu.style.left = (dd.location.x) + 'px';\r\n      dd.menu.style.top = (dd.location.y) + 'px';\r\n      refineDDlocation(dd, location);\r\n   }\r\n\r\n   let defaultOptions = {\r\n      target: null,\r\n      layer: null,\r\n      toggleEvents: ['click'],\r\n      animationDuration: 300,\r\n      indicator: {size: { width: 20, height: 10}, shape: 'triangle'}\r\n   }\r\n   options = options || {};\r\n   options = { ...defaultOptions, ...options };\r\n\r\n   if (!options.target) throw new Error('Oops, your targetted html element (content) is undefined.');\r\n   let obj = {\r\n      options,\r\n      target: options.target,\r\n      toggle: options.target.querySelector('.toggle'),\r\n      menu: options.target.querySelector('.menu'),\r\n      layer: options.layer,\r\n      location: { x: 0, y: 0},\r\n      status: 'hidden',\r\n\r\n      __setStatus: function(status) {\r\n         this.target.classList.remove(obj.status);\r\n         this.clonedDD.classList.remove(obj.status);\r\n         this.status = status;\r\n         this.target.classList.add(obj.status);\r\n         this.clonedDD.classList.add(obj.status);\r\n      },\r\n\r\n      show: function () {\r\n         if (this.status !== 'hidden') return;\r\n\r\n         this.setStatus('showing');\r\n         setClonedDDstyles(this);\r\n\r\n         setTimeout(() => {\r\n            this.setStatus('shown');\r\n         }, this.options.animationDuration);\r\n      },\r\n\r\n      hide: function () {\r\n         if (this.status !== 'opened') return;\r\n\r\n         this.setStatus('closing');\r\n\r\n         setTimeout(() => {\r\n            this.setStatus('closed');\r\n         }, this.options.animationDuration);\r\n      },\r\n\r\n      prepare: function() {\r\n         var toggle = this.toggle,\r\n            menu = this.menu;\r\n\r\n         var indicator = document.createElement('div');\r\n         var layer = document.createElement('div');\r\n         var cloned = document.createElement('div');\r\n\r\n         //#region adding classes and events\r\n\r\n         cloned.classList.add('cloned-dropdown');\r\n         indicator.classList.add('indicator');\r\n         layer.classList.add('layer');\r\n\r\n         for (let evt of options.toggleEvents) {\r\n            toggle.addEventListener(evt, (e) => {\r\n               if (this.status === 'opened') {\r\n                  this.close();\r\n               } else if (this.status === 'closed') {\r\n                  this.open();\r\n               }\r\n            });\r\n         }\r\n\r\n         layer.addEventListener('click', () => {\r\n            if (this.status === 'opened') {\r\n               this.close();\r\n            }\r\n         });\r\n\r\n\r\n         //#endregion\r\n         indicator.style.width = this.options.indicatorSize.width + 'px';\r\n         indicator.style.height = this.options.indicatorSize.height + 'px';\r\n         cloned.appendChild(indicator);\r\n         cloned.appendChild(layer);\r\n         cloned.appendChild(menu);\r\n         this.clonedDD = cloned;\r\n         this.indicator = indicator;\r\n         this.setStatus('closed');\r\n\r\n         document.body.appendChild(cloned);\r\n      }\r\n\r\n   };\r\n\r\n   return obj;\r\n}\r\n\r\n","SUI.TempMessege = function (options = {}){\r\n   options = {\r\n      content: '',\r\n      layer: false,\r\n      toolsbar: true,\r\n      duration: 2000,\r\n      position: null,\r\n      onhoverFix: true,\r\n      parent: document.body,\r\n      ...options\r\n   };\r\n\r\n   let me = {\r\n\r\n      options,\r\n      status: 'hidden',\r\n      elt: (function __htmlToElement() {\r\n         let div = document.createElement('div');\r\n         \r\n         //#region header\r\n         let header = document.createElement('div');\r\n         header.innerHTML = \r\n         `  <div class=\"header\">\r\n               <div class=\"tools\">\r\n                  <div class=\"fix\">\r\n                     <button class=\"fix-btn transbtn-1\">\r\n                        <i class=\"fas fa-crop-alt\"></i>\r\n                     </button>\r\n                  </div>\r\n                  \r\n                  <div class=\"drag\">\r\n                     <div class=\"drag-inner\">\r\n                        <span></span><span></span>\r\n                        <span></span><span></span>\r\n                        <span></span><span></span>\r\n                     </div>\r\n                  </div>\r\n\r\n                  <div class=\"close\">\r\n                     <button class='closebtn-1 transbtn-1'><div class='inner'></div></button>\r\n                  </div>\r\n               </div>\r\n            </div>`;\r\n         header = header.firstElementChild;\r\n         //#endregion\r\n         \r\n         //#region content\r\n         let content = document.createElement('div');\r\n         content.classList.add('content-wrapper');\r\n         //#endregion\r\n         \r\n         if(options.toolsbar) div.appendChild(header);\r\n         div.appendChild(content);\r\n\r\n         div.classList.add('sui-temp-messege');\r\n         div.style.display = 'none';\r\n         let parentStyle = getComputedStyle(options.parent);\r\n         let zIndex = parentStyle.zIndex;\r\n         zIndex = !isNaN(zIndex) ? Math.max(parentStyle.zIndex + 2, 2000) : 2000;\r\n         div.style.zIndex =zIndex; // +1 for layer if exists +2 for messege\r\n         options.zIndex = div.style.zIndex;\r\n         return div;\r\n\r\n      })(),\r\n\r\n      setContent: function (html) {\r\n         clearNodes(this.content);\r\n         this.content.innerHTML = html;\r\n      },\r\n\r\n      setPosition: function (pos) {\r\n         pos = pos || { top: 100, left: 100 };\r\n         this.options.position = pos;\r\n         this.__setBox();\r\n      },\r\n\r\n      show: function () {\r\n         if (this.layer) this.layer.show(200);\r\n         if (this.status === 'hiding' || this.status === 'hidden') {\r\n            // when \"\"\"\"\"\"\"\"\"\"\"\" hidden or hiding \"\"\"\"\"\"\"\"\"\"\"\"\r\n            let jelt = $(this.elt); // this is the same as me\r\n            jelt.removeClass(this.status);\r\n            jelt.addClass('showing');\r\n            this.status = 'showing';\r\n            if (!this.fixed) {\r\n               /// fade out after a snap of time\r\n               jelt\r\n                  .stop(true)\r\n                  .fadeIn('fast', () => {\r\n                     jelt.removeClass('showing');\r\n                     jelt.addClass('shown');\r\n                     this.status = 'shown';\r\n                  })\r\n                  .delay(options.duration) /// delay won't work unless you use fageIn or Out just after it, animate jQuery API function won't work, moreover, there is no callBack function for delay, so using fadeIn after it solves this problematic situation. \r\n                  .fadeIn(0, () => {\r\n                     this.hide();\r\n                  });\r\n            } else {\r\n               jelt\r\n                  .stop(true)\r\n                  .fadeIn('fast', () => {\r\n                     jelt.removeClass('showing');\r\n                     jelt.addClass('shown');\r\n                     this.status = 'shown';\r\n                  })\r\n            }\r\n         } \r\n      },\r\n      hide: function (closing = false) {\r\n         let onhoverFix = this.options.onhoverFix;\r\n         if (closing) this.options.onhoverFix = false;\r\n         if (this.layer) this.layer.hide(200);\r\n         if (this.status === 'showing' || this.status === 'shown') {\r\n\r\n            let jelt = $(this.elt); // this is the same as me\r\n            jelt.removeClass(this.status);\r\n            jelt.addClass('hiding');\r\n            this.status = 'hiding';\r\n            jelt\r\n               .stop(true)\r\n               .fadeOut('slow', () => {\r\n                  jelt.removeClass('hiding');\r\n                  jelt.addClass('hidden');\r\n                  this.status = 'hidden';\r\n                  this.options.onhoverFix= onhoverFix;\r\n               });\r\n         }\r\n      },\r\n\r\n      toggleFix: function () {\r\n         if (this.fixed) {\r\n            /// un fix\r\n            this.elt.classList.remove('fixed');\r\n         } else {\r\n            /// fix\r\n            this.elt.classList.add('fixed');\r\n         }\r\n         this.fixed = !this.fixed;\r\n         this.show(); \r\n      },\r\n\r\n      __setBox: function () {\r\n         let pos = this.options.position;\r\n         if (pos) {     \r\n            if (pos.top || pos.top === 0) { this.elt.style.top = pos.top + 'px'; }\r\n            else { this.elt.style.top = '' }\r\n            \r\n            if (pos.left || pos.left === 0) { this.elt.style.left = pos.left + 'px'; }\r\n            else { this.elt.style.left = '' }\r\n           \r\n            if (pos.bottom || pos.bottom === 0) { this.elt.style.bottom = pos.bottom + 'px'; }\r\n            else { this.elt.style.bottom = '' }\r\n            \r\n            if (pos.right || pos.right === 0) { this.elt.style.right = pos.right + 'px'; }\r\n            else { this.elt.style.right = '' }\r\n         }\r\n      }\r\n\r\n   };\r\n  \r\n   me.content = me.elt.querySelector('.content-wrapper');\r\n   if (options.toolsbar) {\r\n      me.header = me.elt.querySelector('.header');\r\n      me.tools = me.header.querySelector('.tools');\r\n   }\r\n\r\n   //#region setup\r\n   \r\n   let parent = options.parent;\r\n   if (options.duration <= 0 || me.fixed) { me.fixed = true; me.elt.classList.add('fixed'); } // setting fixed to true\r\n   if (options.toolsbar) {\r\n      me.tools.querySelector('.close button').addEventListener('click', () => { \r\n         me.hide(true);\r\n      });\r\n      me.tools.querySelector('.fix button').addEventListener('click', () => { \r\n         me.toggleFix();\r\n      });\r\n   }\r\n\r\n   if(options.onhoverFix){\r\n      me.elt.addEventListener('mouseenter', () => {\r\n         if (me.layer) me.layer.show(200);\r\n         let jelt = $(me.elt);\r\n         if (me.status === 'hiding' || me.status === 'hidden') {\r\n            // when \"\"\"\"\"\"\"\"\"\"\"\" hidden or hiding \"\"\"\"\"\"\"\"\"\"\"\"\r\n            jelt.removeClass(me.status);\r\n            jelt.addClass('showing');\r\n            me.status = 'showing';\r\n            jelt\r\n               .stop(true)\r\n               .fadeIn('fast', () => {\r\n                  jelt.removeClass('showing');\r\n                  jelt.addClass('shown');\r\n                  me.status = 'shown';\r\n               });\r\n         } else {\r\n            /// I am doing this as it may been set to fadeOut after a delay, so I will complete showing if it is not completely shown, then I will stop all this or all thing will be finished, no fade out will occur.\r\n            if (me.status === 'showing') {\r\n               jelt\r\n                  .stop(true) \r\n                  .fadeIn('fast', () => {\r\n                     jelt.removeClass('showing');\r\n                     jelt.addClass('shown');\r\n                     me.status = 'shown';\r\n                  });\r\n            }\r\n            // else is necessarily when me.status === 'shown'\r\n            else {\r\n               jelt\r\n                  .stop(true)\r\n            }\r\n         }\r\n      });\r\n      me.elt.addEventListener('mouseleave', () => {\r\n         // this boolean conditions in if must be by default either showing or shown.\r\n         /// let us make these conditions for avoiding any problems.\r\n         let jelt = $(me.elt);\r\n         if (me.status === 'shown' || me.status === 'showing') {\r\n            if (me.fixed) {\r\n               jelt\r\n                  .stop(true)\r\n                  .fadeIn('fast', () => {\r\n                     jelt.removeClass(me.status); // remove 'showing'\r\n                     jelt.addClass('shown');\r\n                     me.status = 'shown';\r\n                  }); // if me.status was showing, then complete the \"showning\" procedures.\r\n            } else {\r\n               // the same as the pre-mentioned code here, but delayand fadeOut after that.\r\n               jelt\r\n                  .stop(true)\r\n                  .fadeIn('fast', () => {\r\n                     jelt.removeClass(me.status); // remove 'showing'\r\n                     jelt.addClass('shown');\r\n                     me.status = 'shown';\r\n                  }) // if me.status was showing, then complete the \"showning\" procedures.\r\n                  .delay(options.duration) // delaying\r\n                  .fadeIn(0, () => {\r\n                     me.hide();\r\n                  }); // all is done, thatk belong to God (Allah) for blessing me wih new ideas and knowledge.\r\n            }\r\n         }\r\n         \r\n      });\r\n   }\r\n\r\n   me.setContent(options.content);\r\n   me.setPosition(options.position);\r\n\r\n   parent.appendChild(me.elt);\r\n\r\n   //#endregion\r\n\r\n   let layer;\r\n   if (options.layer) layer = SUI.BackLayer({\r\n      eltTOcover: parent,\r\n      zIndex: options.zIndex - 1,\r\n      onclick: () => {\r\n         me.hide(true);\r\n      }\r\n   });\r\n   me.layer = layer;\r\n  \r\n   return me;\r\n}","$(\".tabs-1 .tabs > li\").bind(\"click\", function () {\r\n   var $this = $(this);\r\n   $(\".tabs-1 .tabs > li\").removeClass(\"active\");\r\n   $this.addClass(\"active\");\r\n   $(\".tabs-1 .tabs-content > li\").removeClass(\"active\");\r\n   $(\".tabs-1 .tabs-content > li\")\r\n      .eq($this.index())\r\n      .addClass(\"active\");\r\n});"]}